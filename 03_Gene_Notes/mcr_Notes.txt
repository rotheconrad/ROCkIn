ROCkIn notes for mcr genes.

Working folder: 03a_mcr (PACE)

###############################################################################
#######
Step 00: Curate sequences
#################################
###############################################################################

a. Find and retrieve sequences

There are 10 classes of mcr genes with multiple squence variants per class.
They are designated as mcr 1.1, mcr 1.2, mcr 2.1, mcr 2.2, and etc.

Search for mcr genes at ncbi refgene database returned 103 results
https://www.ncbi.nlm.nih.gov/pathogens/refgene/#mcr

Download fasta sequences and rename files. These are referred to as the curated or reference sequences (RefSeqs.faa)

b. Explore sequence diversity

Use EBI Clustalo https://www.ebi.ac.uk/Tools/msa/clustalo/ 

- Select Pearson/FASTA format. Copy and paste sequences.
- Download alignment file. Copy and paste to text file. Open in AliView.
- Select Results Viewers tab.
- Select send to simple phylogeny.
- Turn on options distance correction, exclude gaps, Neighbour-joing, and percent identity matrix.
- Select view phylogenetic tree file. Copy and paste to text file (.nwk). Open in FigTree
- Select result summary tab.
- Download the *.pim file (PIM) for the percent identity matrix.

> python 00a_PIM_clustered_heatmap.py -i PIM -o RefSeqs.faa.dst.pdf

###############################################################################
#######
Step 01: UniProt sequence search
#################################
###############################################################################

Run a search of the curated mcr sequences (RefSeqs) against the UniProt database.
This is to look for extended sequence diversity.

I selected 1 representative sequence from each of 10 mcr clades.
Sequences within clades are highly similar and won't benefit the search.

I named this file: ncbi_refgenes_mcr_renamed_reduced.fasta and placed it
in the 00_curatated seqs folder.

I use a script from EBI webservices to do this search in a terminal.

I wrapped it in a pbs job to run on PACE.

from: /storage/home/hcoda1/9/rconrad6/p-ktk3-0/02_ROCker/03a_mcr

# This returns UniProt IDs for sequence matches
> qsub -v fasta=00b_curated_seqs/ncbi_refgenes_mcr_renamed_reduced.fasta ../00b_PBS/01a_ebi_blast.pbs

# file house keeping
> mkdir 01a_ebi_blast_ids 01b_ebi_dat 01c_ebi_fasta
> mv *ids.txt 01a_ebi_blast_ids

# Download the *.dat files from EBI with dbfetch
> for f in 01a_ebi_blast_ids/*; do odir='01b_ebi_dat'; gene=`basename $f | cut -d. -f1`; echo $gene; if [ ! -d ${odir}/${gene} ]; then mkdir ${odir}/${gene}; fi; qsub -v input=${f},odir=${odir},gene=${gene} ../00b_PBS/01b_ebi_dbfetch.pbs; done

# Parse the .dat file into a fasta file
# place relevant info in the sequence deflines we will use downstream
> for d in 01b_ebi_dat/*; do n=`basename $d`; echo $n; python ../00c_Scripts/01d_parse_dat_file.py -i $d -o 01c_ebi_fasta/${n}.fasta; done

# concatenate to single fasta file
> cat 01c_ebi_fasta/MCR-* >> 01c_ebi_fasta/00_MCR_all_ebi_matches.fa

###############################################################################
#######
Step 02: Deduplicate, Filter, ClusterReps, align, trim, tree -> annotated.tsv
#################################
###############################################################################

# setup directories
> mkdir 02a_tree_prep

#######
a. Deduplicate
###############################################################################

Since we have multiple verified sequences that we searched to UniProt, we likely have found overlapping search results. Concatenate fasta files of all search result sequences and deduplicate by UniProt ID. I wrote a Python script to deduplicate the concatenated fasta

> python ../00c_Scripts/02a_Remove_Duplicate_Fasta_Entries.py -f 01c_ebi_fasta/00_MCR_all_ebi_matches.fa -o 02a_tree_prep/00_MCR_dedup_ebi.fa

		Total sequences in file: 10000
		Duplicates Removed: 6225
		Unique sequences retained: 3775

It seems there were a lot of the same sequences matching to the various mcr clades. 

#######
b. Filter
###############################################################################

The initial sequence search does not have great options to filter the matches that are returned. As such, it usually returns many spurious matches. Additionally, we do not need to keep sequences that are 100% identical to our curated sequences as this does not add any new information for the ROCker model.

To filter our search results, I run Blastp locally using the curated sequence as the reference database and the search results as the query.

I wrote a Python script that does 3 filters:
	1) Remove matches >= 98% identity to verified sequences
	2) Removes matches <= 30% identity to verified sequences
	3) Remove matches with <= 50% sequence alignment (alignment length / query sequence length).

It also plots histograms of each parameter post filtering and can be rerun with different filtering options if neccessary.

I wrapped it into a pbs script.

> qsub -v ref=00b_curated_seqs/ncbi_refgenes_mcr_renamed_reduced.fasta,qry=02a_tree_prep/00_MCR_dedup_ebi.fa,out=02a_tree_prep/01_MCR_fltr_ebi,name=mcrA ../00b_PBS/02b_Blastp.pbs

Total number of entries in blast file: 38581
Number of entries failing the filters: 1253
Number of entries passing the filters: 37328
Number of duplicate blast matches passing filter to remove: 33553
Number of best hit entries written to new file: 3775 

#######
c. ClusterReps
###############################################################################

Since we still have a lot of sequences lets dereplicate the set some.

mmseqs clustering at 90% amino acid sequence similarity

> qsub -v infile=02a_tree_prep/01_MCR_fltr_ebi_blast_fltrd.fasta,odir=02a_tree_prep,n=mcr ../00b_PBS/02c_mmseqs.pbs

> grep -c '>' 02a_tree_prep/02_mmseqs_reps.fasta

Representative sequences retained: 1110

#######
d. Align
###############################################################################

sequence alignment with clustal omega

For this I am first building an alignment with the 10 curated sequences and then fitting the searched sequences to that alignment. This runs clustal omega twice.

> qsub -v verified=00b_curated_seqs/ncbi_refgenes_mcr_renamed_reduced.fasta,newseqs=02a_tree_prep/02_mmseqs_reps.fasta,n=mcr ../00b_PBS/02d_seq_alignment.pbs

# sequences before trimming
> grep -c '>' 02_mmseqs_reps.fasta.aln
Sequences before trimming: 1120 (1110 searched + 10 curated)

#######
e. trim
###############################################################################

trim the alignment with trimmal

Before building a phylogenetic tree, MSAs should be cleaned to removed spurious sequences and columns consisting mainly of gaps.

I'm using trimmal for this

> qsub -v input=02a_tree_prep/02_mmseqs_reps.fasta.aln,output=02a_tree_prep/03_trimmed.fasta.aln,n=mcr ../00b_PBS/02e_seq_trim.pbs

# count sequences after trimming
> grep -c '>' 03_trimmed.fasta.aln
Sequences after trimming: 1119


clean up sequence names for the tree.

> python ../00c_Scripts/02e_clean_seq_names.py -i 02a_tree_prep/03_trimmed.fasta.aln

#######
f. tree
###############################################################################

Build phylogenetic tree with RAxML

# single ML Distance tree
> qsub -v input=02a_tree_prep/03_trimmed.fasta.aln,output=04a_RAxML-Distance,name=MCL_distance ../00b_PBS/02f_RAxML_AminoAcid-Distance.pbs 

# bootstrapped ML tree
> qsub -v input=02a_tree_prep/03_trimmed.fasta.aln,output=04b_RAxML-Bootstrap,name=MCL_bootstrap ../00b_PBS/02f_RAxML_AminoAcid-Bootstrap.pbs

# Fasttree - approximate maximum likelihood tree
> qsub -v input=02a_tree_prep/03_trimmed.fasta.aln,output=04c_FastTree.nwk,n=mcr ../00b_PBS/02f_FastTree.pbs 

#######
g. annotated.tsv
###############################################################################

create annotated tsv file to explore clades.

To further inform our decisions from the tree, we want to know which species and functional annotations are in each clade. To do this I wrote python code that uses the branch distance from the tree to create a distance matrix which is used in clustering algorithms. It gets clades from the the tree as clusters and creates a tsv file with species and annotation information for each sequence.

# concatenate the curated sequences and the dereplicated filtered searched sequences
> cat 00b_curated_seqs/ncbi_refgenes_mcr_renamed_reduced.fasta 02a_tree_prep/02_mmseqs_reps.fasta >> 02a_tree_prep/04_MCR_sequence_set.fasta

# setup directory
> mkdir 05a_Clade_info_distance 05b_Clade_info_bootstrap 05c_Clade_info_fasttree

# convert nwk to distance matrix, cluster the matrix and add annotations

# RAxML Distance
> python ../00c_Scripts/02g_Tree_Distance_Cluster.py -i 04a_RAxML-Distance/RAxML_parsimonyTree.MCL_distance.RAxML -o 05a_Clade_info_distance/05a_Clade_info_distance -f 02a_tree_prep/04_MCR_sequence_set.fasta

# RAxML Bootstrap
> python ../00c_Scripts/02g_Tree_Distance_Cluster.py -i 04b_RAxML-Bootstrap/RAxML_bestTree.MCL_bootstrap.RAxML -o 05b_Clade_info_bootstrap/05b_Clade_info -f 02a_tree_prep/04_MCR_sequence_set.fasta

# Fasttree
> python ../00c_Scripts/02g_Tree_Distance_Cluster.py -i 04c_FastTree.nwk -o 05c_Clade_info_fasttree/05c_Clade_info_fasttree -f 02a_tree_prep/04_MCR_sequence_set.fasta

#######
h. Create annotated phylogenetic tree PDF
###############################################################################

from LOCAL: /Users/rothconrad/OneDrive - Georgia Institute of Technology/00_ROCker/03_mcr_colistin/02_ROCin-mcr

# cluster test 01:
	min_cluster_size= 5% of total sequences in tree
	min_samples=1
	epsilon= 10th percentile of distances

# newick distance and cluster
> python ../../00d_Scripts/02g_Tree_Distance_Cluster.py -i 05e_Clade_info_bootstrap_hdb-01/RAxML_bestTree.MCL_bootstrap.RAxML -f 02a_tree_prep/04_MCR_sequence_set.fasta -o 05e_Clade_info_bootstrap_hdb-01/test02

# redo clustering from distance matrix
> python ../../00d_Scripts/02g_Tree_Distance_Cluster.py -d 05e_Clade_info_bootstrap_hdb-01/05d_Clade_info_distmat.tsv -f 02a_tree_prep/04_MCR_sequence_set.fasta -o 05e_Clade_info_bootstrap_hdb-01/test01

# plot tree
> python ../../00d_Scripts/02i_Plot_Annotated_Tree_v2.py -n 05e_Clade_info_bootstrap_hdb-01/RAxML_bestTree.MCL_bootstrap.RAxML -a 05e_Clade_info_bootstrap_hdb-01/test02_annotated.tsv -o TREE_test01.pdf

###############################################################################
#######
Step 03: Build ROCker Models
#################################
###############################################################################

Collect accession numbers for each cluster from 05b_Clade_info_bootstrap_annotated.tsv and create positive and negative text files for each Clade/Cluster to build a ROCker model for. I used Excel and a text editor at this step to create these files. Single column text files from the "Gene_Name" column of the annotated.tsv file. The Gene_Name is the Uniprot accession ID. Remove the REFERENCE SEQUENCEs from these files as they come with NCBI acession numbers and will not be foun in UniProt.

Collect a pos and neg .txt file for each model within a separate directory for each model and upload to PACE cluster.

###############################################################################
#### MCR 1,2 & 6 clade (cluster 2) POSITIVE.
#### All else NEGATIVE
from PACE: /storage/scratch1/9/rconrad6/ROCkOut/02_mcr/Update_1

# Download the files
> python ../../ROCkOut/rockout_main.py download -d model -p TREE_test01_pos.txt -n TREE_test01_neg.txt -t 5

# Build the model
> sbatch --export dir=model ../../00b_sbatch/rocker_build.sbatch

###############################################################################
#### MCR 1,2 & 6 clade (cluster 2) POSITIVE.
#### Cluster 15, 3, 14, and surrounding -1's NEGATIVE.
from PACE: /storage/scratch1/9/rconrad6/ROCkOut/02_mcr/Update_1b

# Download the files
> python ../../ROCkOut/rockout_main.py download -d model -p TREE_test01_pos.txt -n TREE_test01_neg.txt -t 5

# Build the model
> python ../../ROCkOut/rockout_main.py build -d model -t 5

###############################################################################
# Download complete directories for each model to local
# from: /Users/rothconrad/OneDrive - Georgia Institute of Technology/00_ROCker/04_mphA/04_ROCker_Models

# Load conda environment
> conda activate ROCkOut

# cd into model directory and run rocker_dash.py
> cd Model_1
> python ../../../ROCkOut/rocker_dash.py


