ROCkIn notes for mph(A) gene.

#######
Step 00: Curate sequences
#################################

a. Find and retrieve sequences

mph genes are in the macrolide family annotated as a 2'-phosphotransferase


I've found 6 classes of mph gene. A, B, C, E, F, and G.
I don't know where D went yet.

Search for mph genes at ncbi refgene database returned 14 results
https://www.ncbi.nlm.nih.gov/pathogens/refgene/#mph

mph(A) - 3 sequences
mph(B) - 1 sequence
mph(C) - 6 sequences
mph(E) - 2 sequences
mph(F) - 1 sequence
mph(G) - 1 sequence

Previously, fasta download from the NCBI refgene database was not possible.
But in the recent update 05/26/22 fasta can be downloaded with the download
option straight from the web interface.

Rename fasta sequences with underscores and shorten names:

>WP_000219391.1_MphA_Bacteria
>WP_063853854.1_MphA_Escherichia_coli
>WP_063853866.1_MphA_Shigella flexneri
>WP_000031017.1_MphB_Bacteria
>WP_063853881.1_MphC_Staphylococcaceae
>WP_063853892.1_MphC_Stenotrophomonas_maltophilia
>WP_000196697.1_MphC_Terrabacteria
>WP_063854131.1_MphC_Staphylococcus_equorum
>WP_063854137.1_MphC_Staphylococcus_xylosus
>WP_063854150.1_MphC_Staphylococcus_equorum
>WP_014325835.1_MphE_Pasteurellaceae
>WP_021263608.1_MphF_Proteobacteria
>WP_014386803.1_MphG_Proteobacteria
>WP_000155092.1_MphE_Proteobacteria

b. Explore sequence diversity

Use EBI Clustalo https://www.ebi.ac.uk/Tools/msa/clustalo/ 

- Select Pearson/FASTA format. Copy and paste sequences.
- Download alignment file. Copy and paste to text file. Open in AliView.
- Select Results Viewers tab.
- Select send to simple phylogeny.
- Turn on options distance correction, exclude gaps, Neighbour-joing, and percent identity matrix.
- Select view phylogenetic tree file. Copy and paste to text file (.nwk). Open in FigTree
- Select result summary tab.
- Download the *.pim file for the percent identity matrix.

From local directory: /Users/rothconrad/OneDrive - Georgia Institute of Technology/00_ROCker/04_mphA/01_pre_ROCin

> python ../../00f_ROCin/02_Python/00a_PIM_clustered_heatmap.py -i NCBI_refgene_mph.faa.pim -o NCBI_refgene_mph.faa.dst.pdf


#######
Step 01: UniProt sequence search
#################################

Run a search of the Mph gene sequences against the UniProt database.
This is to look for extended sequence diversity that hasn't been curated.

Select 1 representative sequence from each class or cluster of mph gene.
Create new file named NCBI_refgene_mph_select.fasta

Upload the file to PACE: /storage/home/hcoda1/9/rconrad6/p-ktk3-0/02_ROCker/04_mph/00b_curated_seqs

# setup directories
> mkdir 00a_log 01b_ebi_dat 04a_RAxML-Distance 05b_Clade_info_bootstrap 00b_curated_seqs 01c_ebi_fasta 04b_RAxML-Bootstrap 05c_Clade_info_fasttree 01a_ebi_blast_ids 02a_tree_prep 05a_Clade_info_distance

a. search uniprot database
from: /storage/home/hcoda1/9/rconrad6/p-ktk3-0/02_ROCker/04_mph
# this returns UniProt IDs for sequence matches
> qsub -v fasta=00b_curated_seqs/NCBI_refgene_mph_select.fasta ../00b_PBS/01a_ebi_blast.pbs
# move files to 01a_ebi_blast_ids folder
> mv *.ids.txt 01a_ebi_blast_ids/

b. retrieve fasta files for matches
# first download the *.dat file from EBI for each sequence match with dbfetch
> for f in 01a_ebi_blast_ids/*; do odir='01b_ebi_dat'; gene=`basename $f | cut -d. -f1`; echo $gene; if [ ! -d ${odir}/${gene} ]; then mkdir ${odir}/${gene}; fi; qsub -v input=${f},odir=${odir},gene=${gene} ../00b_PBS/01b_ebi_dbfetch.pbs; done

# parse the .dat file to get the sequence in fasta format
# place relevant info in the sequence deflines we will use downstream
> for d in 01b_ebi_dat/*; do n=`basename $d`; echo $n; python ../00c_Scripts/01d_parse_dat_file.py -i $d -o 01c_ebi_fasta/${n}.fasta; done

# concatenate gene fastas into single fasta file
> cat 01c_ebi_fasta/*.fasta >> 01c_ebi_fasta/00_mph_all_ebi_matches.fa

#######
Step 02: Deduplicate, Filter, ClusterReps, align, trim, tree -> annotated.tsv
#################################

a. Deduplicate
###############################################################################

Since we have multiple verified sequences that we searched to UniProt, we likely have found overlapping search results. Concatenate fasta files of all search result sequences and deduplicate by UniProt ID. I wrote a Python script to deduplicate the concatenated fasta

> python ../00c_Scripts/02a_Remove_Duplicate_Fasta_Entries.py -f 01c_ebi_fasta/00_mph_all_ebi_matches.fa -o 02a_tree_prep/00_mph_dedup_ebi.fa

		Total sequences in file: 7000
		Duplicates Removed: 5859
		Unique sequences retained: 1141

b. Filter
###############################################################################

The initial sequence search does not have great options to filter the matches that are returned. As such, it usually returns many spurious matches. Additionally, we do not need to keep sequences that are 100% identical to our curated sequences as this does not add any new information for the ROCker model.

To filter our search results, I run Blastp locally using the curated sequence as the reference database and the search results as the query.

I wrote a Python script that does 3 filters:
	1) Remove matches >= 98% identity to verified sequences
	2) Removes matches <= 30% identity to verified sequences
	3) Remove matches with <= 50% sequence alignment (alignment length / query sequence length).

It also plots histograms of each parameter post filtering and can be rerun with different filtering options if neccessary.

I wrapped it into a pbs script.

> qsub -v ref=00b_curated_seqs/NCBI_refgene_mph_select.fasta,qry=02a_tree_prep/00_mph_dedup_ebi.fa,out=02a_tree_prep/01_mph_fltr_ebi,name=mph ../00b_PBS/02b_Blastp.pbs

> cat 00a_log/02b_BlastP_mph.out

Total number of entries in blast file: 8150
Number of entries failing the filters: 642
Number of entries passing the filters: 7508
Number of duplicate blast matches passing filter to remove: 6373
Number of best hit entries written to new file: 1135 

c. ClusterReps
###############################################################################

Since we still have a lot of sequences lets dereplicate the set some.

mmseqs clustering at 90% amino acid sequence similarity

> qsub -v infile=02a_tree_prep/01_mph_fltr_ebi_blast_fltrd.fasta,odir=02a_tree_prep,n=mph ../00b_PBS/02c_mmseqs.pbs

> grep -c '>' 02a_tree_prep/02_mmseqs_reps.fasta

Representative sequences retained: 375

d. Align
###############################################################################

sequence alignment with clustal omega

For this I am first building an alignment with the 10 curated sequences and then fitting the searched sequences to that alignment. This runs clustal omega twice.

> qsub -v verified=00b_curated_seqs/NCBI_refgene_mph_select.fasta,newseqs=02a_tree_prep/02_mmseqs_reps.fasta,n=mph ../00b_PBS/02d_seq_alignment.pbs

# sequences before trimming
> grep -c '>' 02a_tree_prep/02_mmseqs_reps.fasta.aln

Sequences before trimming: 382 (375 searched + 7 curated)

e. trim
###############################################################################

trim the alignment with trimmal

Before building a phylogenetic tree, MSAs should be cleaned to removed spurious sequences and columns consisting mainly of gaps.

I'm using trimmal for this

> qsub -v input=02a_tree_prep/02_mmseqs_reps.fasta.aln,output=02a_tree_prep/03_trimmed.fasta.aln,n=mph ../00b_PBS/02e_seq_trim.pbs

# count sequences after trimming
> grep -c '>' 02a_tree_prep/03_trimmed.fasta.aln

Sequences after trimming: 379

clean up sequence names for the tree.

> python ../00c_Scripts/02e_clean_seq_names.py -i 02a_tree_prep/03_trimmed.fasta.aln

f. tree
###############################################################################

Build phylogenetic tree with RAxML

# single ML Distance tree
> qsub -v input=02a_tree_prep/03_trimmed.fasta.aln,output=04a_RAxML-Distance,name=mph_distance ../00b_PBS/02f_RAxML_AminoAcid-Distance.pbs 

# bootstrapped ML tree
> qsub -v input=02a_tree_prep/03_trimmed.fasta.aln,output=04b_RAxML-Bootstrap,name=mph_bootstrap ../00b_PBS/02f_RAxML_AminoAcid-Bootstrap.pbs

# Fasttree - approximate maximum likelihood tree
> qsub -v input=02a_tree_prep/03_trimmed.fasta.aln,output=04c_mph_FastTree.nwk,n=mph ../00b_PBS/02f_FastTree.pbs 

g. annotated.tsv
###############################################################################

create annotated tsv file to explore clades.

from: /storage/home/hcoda1/9/rconrad6/p-ktk3-0/02_ROCker/04_mph

To further inform our decisions from the tree, we want to know which species and functional annotations are in each clade. To do this I wrote python code that uses the branch distance from the tree to create a distance matrix which is used in clustering algorithms. It gets clades from the the tree as clusters and creates a tsv file with species and annotation information for each sequence.

# concatenate the curated sequences and the dereplicated filtered searched sequences
> cat 00b_curated_seqs/NCBI_refgene_mph_select.fasta 02a_tree_prep/02_mmseqs_reps.fasta >> 02a_tree_prep/04_mph_sequence_set.fasta

# convert nwk to distance matrix, cluster the matrix and add annotations

# RAxML Bootstrap
> mkdir 05a_Clade_info
> python ../00c_Scripts/02g_Tree_Distance_Cluster.py -i 04b_RAxML-Bootstrap/RAxML_bestTree.mph_bootstrap.RAxML -f 02a_tree_prep/04_mph_sequence_set.fasta -o 05a_Clade_info/05a

# plot tree
> python ../00c_Scripts/02i_Plot_Annotated_Tree_v2.py -a 05a_Clade_info/05a_annotated.tsv -n 04b_RAxML-Bootstrap/RAxML_bestTree.mph_bootstrap.RAxML -o 05a_Clade_info/Clade_Tree_mph.pdf

Download the tree and tsv. Review to make positive and negative UniProt ID selections to give to ROCkOut.

# Making clade assignment adjustments to the 05_annotated.tsv and the Clade_Tree_mph.pdf locally.
from: /Users/rothconrad/OneDrive - Georgia Institute of Technology/00_ROCker/04_mphA/02_ROCkin
> python ../../ROCkIn/02_Python/02i_Plot_Annotated_Tree_v2.py -a 05a_annotated.tsv -n 00_Development/RAxML_bestTree.mph_bootstrap.RAxML -o Adjusted_Tree_mph.pdf

#######
Step 03: Build ROCker Models
#################################

Collect accession numbers for each cluster from ROCkIn annotated tsv using the labelled phylogenetic tree as reference and create positive and negative text files for each Clade/Cluster to build a ROCker model for. I used Excel and a text editor at this step to create these files. Single column text files from the "Gene_Name" column of the annotated.tsv file. The Gene_Name is the Uniprot accession ID. Remove the REFERENCE SEQUENCEs from these files as they come with NCBI acession numbers and will not be found in UniProt.

Collect a pos and neg .txt file for each model within a separate directory for each model and upload to PACE cluster.

# load the conda environment for ROCkOut before the sbatch script or manual steps.
# depending on your compute cluster you may have to activate the conda environment inside the sbatch script

# I created an alias to conda activate my rocker environment
> rockout

# Download, Build and plot the model in step.
> sbatch --export odir=model/,pos=pos.txt,neg=neg.txt ../../00b_sbatch/ROCkOut.sbatch

# the sbatch script includes the following steps if you want to do it manually
# Replace ${dir} with your project directory.
# It is a new directory created during the download step.
# Call it whatever you want.

> rockout='/path/to/ROCkOut/git/repo/rockout_main.py'

# Download the data
> python ${rockout} download -d ${dir} -p ${pos} -n ${neg} -t 10

# Build the model
> python ${rockout} build -d ${dir} -t 10

# Generate the plots
> python ${rockout} refine-ni -d ${dir}

















